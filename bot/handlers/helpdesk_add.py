# bot/handlers/helpdesk.py (–ü–û–í–ù–ê –í–ï–†–°–Ü–Ø –ó –Ü–°–¢–û–†–Ü–Ñ–Æ –¢–ê –ó–ê–õ–ò–®–ö–ê–ú–ò)

import datetime
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bson.objectid import ObjectId
from os import getenv

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó
from bot.utils.td_dg import orders_collection, teams_collection, products_collection
from bot.keyboards.choices import get_helpdesk_menu_kb
from bot.utils.sheetslogger import log_action

router = Router()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤
STATUS_EMOJI = {
    "new": "üïô –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ",
    "approved": "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–¥–∞—á—ñ",
    "rejected": "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
    "completed": "üëåüèª –í–∏–¥–∞–Ω–æ"
}

# --- –°—Ç–∞–Ω–∏ (FSM) —Ç–∞ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–±–µ–∑ –∑–º—ñ–Ω) ---
class HelpDeskLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class RejectOrder(StatesGroup):
    waiting_for_reason = State()
# ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç –±–µ–∑ –∑–º—ñ–Ω)

# --- 1. –ü–ï–†–ï–ì–õ–Ø–î –ó–ê–õ–ò–®–ö–Ü–í (–ú–ê–ì–ê–ó–ò–ù) ---
@router.callback_query(F.data.startswith("hd_stock_view"))
async def show_stock_page(callback: types.CallbackQuery):
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        page = 1

    ITEMS_PER_PAGE = 10
    skip = (page - 1) * ITEMS_PER_PAGE
    
    total_items = await products_collection.count_documents({})
    products = await products_collection.find({}).sort("name", 1).skip(skip).limit(ITEMS_PER_PAGE).to_list(length=ITEMS_PER_PAGE)

    if not products:
        return await callback.answer("–¢–æ–≤–∞—Ä—ñ–≤ —É –±–∞–∑—ñ –Ω–µ–º–∞—î.", show_alert=True)
        
    text = "üõçÔ∏è **–ó–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ:**\n\n"
    for p in products:
        text += f"üîπ **{p.get('name')}**: {p.get('stock_quantity', 0)} —à—Ç.\n"
        
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"hd_stock_view_{page-1}"))
    if total_items > page * ITEMS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"hd_stock_view_{page+1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é HelpDesk", callback_data="hd_main_menu_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# --- 2. –Ü–°–¢–û–†–Ü–Ø –ó–ê–ú–û–í–õ–ï–ù–¨ (–ó–ê–ì–ê–õ–¨–ù–ê) ---
@router.callback_query(F.data.startswith("hd_general_history"))
async def show_general_history_page(callback: types.CallbackQuery):
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        page = 1

    ITEMS_PER_PAGE = 5
    skip = (page - 1) * ITEMS_PER_PAGE
    
    total_orders = await orders_collection.count_documents({})
    all_orders = await orders_collection.find({}).sort("created_at", -1).skip(skip).limit(ITEMS_PER_PAGE).to_list(length=ITEMS_PER_PAGE)
    
    if not all_orders:
        return await callback.answer("–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.", show_alert=True)

    text = "üìú **–ó–∞–≥–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å:**\n\n---\n"
    for order in all_orders:
        date_str = (order.get('created_at') + datetime.timedelta(hours=3)).strftime('%d.%m %H:%M')
        status_text = STATUS_EMOJI.get(order.get('status'), '–ù–µ–≤—ñ–¥–æ–º–æ')
        text += (f"**‚Ññ{order['order_number']}** ({date_str}) - **{order['team_name']}**\n"
                 f"–°—Ç–∞—Ç—É—Å: {status_text}, –°—É–º–∞: {order['total_cost']}\n---\n")

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"hd_general_history_{page-1}"))
    if total_orders > page * ITEMS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"hd_general_history_{page+1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é HelpDesk", callback_data="hd_main_menu_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# --- 3. –Ü–°–¢–û–†–Ü–Ø –ó–ê–ú–û–í–õ–ï–ù–¨ (–ü–û –ö–û–ú–ê–ù–î–ê–•) ---

# –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä –∫–æ–º–∞–Ω–¥–∏
@router.callback_query(F.data == "hd_team_history")
async def choose_team_for_history(callback: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –∫–æ–º–∞–Ω–¥, —è–∫—ñ —Ä–æ–±–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    team_names = await orders_collection.distinct("team_name")
    
    if not team_names:
        return await callback.answer("–©–µ –∂–æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–±–∏–ª–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å.", show_alert=True)

    buttons = [[InlineKeyboardButton(text=name, callback_data=f"hd_th_{name}")] for name in sorted(team_names)]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é HelpDesk", callback_data="hd_main_menu_back")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üë• –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó:", reply_markup=keyboard)

# –ö—Ä–æ–∫ 2: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
@router.callback_query(F.data.startswith("hd_th_"))
async def show_team_history_page(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    team_name = parts[2]
    page = int(parts[3]) if len(parts) > 3 else 1
    
    ITEMS_PER_PAGE = 5
    skip = (page - 1) * ITEMS_PER_PAGE

    db_filter = {"team_name": team_name}
    total_orders = await orders_collection.count_documents(db_filter)
    team_orders = await orders_collection.find(db_filter).sort("created_at", -1).skip(skip).limit(ITEMS_PER_PAGE).to_list(length=ITEMS_PER_PAGE)

    text = f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ–º–∞–Ω–¥–∏ {team_name}:**\n\n"
    for order in team_orders:
        date_str = (order.get('created_at') + datetime.timedelta(hours=3)).strftime('%d.%m %H:%M')
        status_text = STATUS_EMOJI.get(order.get('status'), '–ù–µ–≤—ñ–¥–æ–º–æ')
        text += (f"**‚Ññ{order['order_number']}** ({date_str}) - –°—Ç–∞—Ç—É—Å: {status_text}\n"
                 f"–°—É–º–∞: {order['total_cost']} –∫—É–ø–æ–Ω—ñ–≤\n–°–∫–ª–∞–¥:\n")
        for item in order['items']:
            text += f" - {item['product_name']} x{item['quantity']} —à—Ç.\n"
        text += "---\n"

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"hd_th_{team_name}_{page-1}"))
    if total_orders > page * ITEMS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"hd_th_{team_name}_{page+1}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        nav_buttons,
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫–æ–º–∞–Ω–¥–∏", callback_data="hd_team_history")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é HelpDesk ---
@router.callback_query(F.data == "hd_main_menu_back")
async def back_to_hd_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ñ—Ç–∞—î–º–æ —á–µ–º–ø—ñ–æ–Ω—ñ–≤ HelpDesk! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_helpdesk_menu_kb())