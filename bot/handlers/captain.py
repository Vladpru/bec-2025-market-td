
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from bson.objectid import ObjectId

# –í–∞–∂–ª–∏–≤–æ: —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
from bot.utils.td_dg import (
    products_collection, teams_collection, users_collection, orders_collection, is_team_exist, is_team_password_correct
)
from bot.utils.sheetslogger import log_action 
from bot.keyboards.choices import captain_menu_kb

router = Router()

class CaptainLogin(StatesGroup):
    team_name = State()
    password = State()


# --- –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø ---
@router.message(F.text == "–ö–æ–º–∞–Ω–¥–∏—Ä –∫–æ–º–∞–Ω–¥–∏")
async def captain_login_start(message: types.Message, state: FSMContext):
    await state.set_state(CaptainLogin.team_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=ReplyKeyboardRemove())

@router.message(CaptainLogin.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text
    if await is_team_exist(team_name):
        await state.update_data(team_name=team_name)
        await state.set_state(CaptainLogin.password)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–∏:")
    else:
        await message.answer("–¢–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

@router.message(CaptainLogin.password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    team_name = user_data.get("team_name")

    if await is_team_password_correct(team_name, password):
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ telegram_id
        await users_collection.update_one(
            {"telegram_id": str(message.from_user.id)}, # –í–ò–ü–†–ê–í–õ–ï–ù–û: —à—É–∫–∞—î–º–æ –ø–æ —Ä—è–¥–∫—É
            {"$set": {"role": "captain", "username": message.from_user.username}},
            upsert=True # –°—Ç–≤–æ—Ä–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        )
        
        await state.clear()
        await message.answer(f"–í—ñ—Ç–∞—î–º–æ, –∫–æ–º–∞–Ω–¥–∏—Ä–µ {team_name}! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=captain_menu_kb)
        await log_action("Captain Login", message.from_user.id, f"Team: {team_name}")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await log_action("Failed Login Attempt", message.from_user.id, f"Team: {team_name}")

# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
@router.callback_query(F.data == "captain_main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=captain_menu_kb)

# --- –ë–ê–õ–ê–ù–° ---
@router.callback_query(F.data == "captain_coupons")
async def show_coupons(callback: types.CallbackQuery):
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –ø—Ä—è–º–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞ –Ω–µ –∑ teams_collection
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.", show_alert=True)
        return

    budget = user.get('budget', 0)
    await callback.message.edit_text(f"üéüÔ∏è –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{budget}** –∫—É–ø–æ–Ω—ñ–≤.", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))
    await log_action("View Balance", callback.from_user.id, f"Budget: {budget}")

# --- –ú–û–á –ú–ê–¢–ï–†–Ü–ê–õ–ò ---
@router.callback_query(F.data == "captain_materials")
async def show_materials(callback: types.CallbackQuery):
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user: return # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –Ω–∞–∑–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    team_name = user.get("team_name")
    completed_orders = await orders_collection.find({"team_name": team_name, "status": "completed"}).to_list(length=None)
    
    owned_items = {}
    for order in completed_orders:
        for item in order['items']:
            owned_items[item['product_name']] = owned_items.get(item['product_name'], 0) + item['quantity']
            
    text = "üì¶ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:\n\n" if owned_items else "üì¶ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤."
    for name, quantity in owned_items.items():
        text += f"üîπ **{name}** - {quantity} —à—Ç.\n"
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))
    await log_action("View Owned Materials", callback.from_user.id)

# --- –Ü–°–¢–û–†–Ü–Ø –ó–ê–ú–û–í–õ–ï–ù–¨ ---
@router.callback_query(F.data == "captain_orders")
async def show_orders_history(callback: types.CallbackQuery):
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user: return

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –Ω–∞–∑–≤—ñ –∫–æ–º–∞–Ω–¥–∏
    team_name = user.get("team_name")
    team_orders = await orders_collection.find({"team_name": team_name}).sort("created_at", -1).to_list(length=100)

    if not team_orders:
        await callback.message.edit_text("üìú –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))
        return

    text = "üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å**\n\n"
    for order in team_orders:
        # –£–í–ê–ì–ê: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —É –≤–∞—Å —î –ø–æ–ª–µ created_at –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        date_str = order.get('created_at').strftime('%Y-%m-%d %H:%M') if order.get('created_at') else '–Ω–µ–≤—ñ–¥–æ–º–æ'
        status = order.get('status', '–Ω–µ–≤—ñ–¥–æ–º–æ')
        order_num = order.get('order_number', '–±/–Ω')
        
        text += f"**–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_num}** –≤—ñ–¥ {date_str} - –°—Ç–∞—Ç—É—Å: `{status}`\n"
        for item in order.get('items', []):
            text += f"   - {item.get('product_name')}: {item.get('quantity')} —à—Ç.\n"
        text += "---\n"

    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é, —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –±—É–¥–µ –±–∞–≥–∞—Ç–æ
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))


# --- –û–ë–ú–Ü–ù/–ü–û–í–ï–†–ù–ï–ù–ù–Ø/–î–û–ü–û–ú–û–ì–ê ---
@router.callback_query(F.data == "captain_exchange")
async def show_exchange_info(callback: types.CallbackQuery):
    text = "üîÑ –î–ª—è –æ–±–º—ñ–Ω—É —Ç–æ–≤–∞—Ä—É, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HelpDesk. –û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏."
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))

@router.callback_query(F.data == "captain_return")
async def show_return_info(callback: types.CallbackQuery):
    text = "‚Ü©Ô∏è –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HelpDesk. –û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏."
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))

@router.callback_query(F.data == "captain_help")
async def show_help(callback: types.CallbackQuery):
    try:
        instruction_file = FSInputFile("–Ü–Ω—Å—Ç—É–∫—Ü—ñ—è –ö–∞–ø—ñ—Ç–∞–Ω.pdf")
        await callback.message.answer_document(instruction_file, caption="‚úèÔ∏è –¶–µ–π —Ñ–∞–π–ª –¥–æ–ø–æ–º–æ–∂–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞")
        await log_action("Get Instructions", callback.from_user.id)
    except FileNotFoundError:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
