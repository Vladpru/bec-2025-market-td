from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from bot.keyboards.registration import get_uni_kb, main_menu_kb, get_course_kb, where_kb, get_reg_kb
from bot.utils.database import save_user_data


router = Router()

class Registration(StatesGroup):
    name = State()
    age = State()
    course = State()
    university = State()
    speciality = State()
    expect_custom_uni = State()
    email = State()
    approval = State() 

def is_correct_text(text):
    text = text.strip()
    if not text:
        return False
    if len(text) > 30:
        return False
    return bool(re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', text)) and not re.fullmatch(r'[\W_]+', text)

def is_correct_speciality(text):
    text = text.strip()
    if not text:
        return False
    if len(text) > 85:
        return False
    return bool(re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', text)) and not re.fullmatch(r'[\W_]+', text)

def is_valid_age(text):
    return text.isdigit() and 16 <= int(text) <= 79

def is_valid_email(text):
    return bool(re.fullmatch(
        r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text.strip()
    ))

@router.message(F.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—èüí°")
async def start_registration(message: types.Message, state: FSMContext):

    photo_path = "assets/register.png"
    photo_to_send = FSInputFile(photo_path)

    await message.answer_photo(
        photo=photo_to_send, 
        caption="–ù—É–º–æ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å! –ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ë–æ–≥–¥–∞–Ω –ö–æ–≤–∞–ª—å—á—É–∫",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.name)

@router.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    name = message.text.strip()
    if not is_correct_text(name):
        await message.answer("üö´ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏.")
        return

    parts = name.split()
    if len(parts) != 2:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ë–æ–≥–¥–∞–Ω –ö–æ–≤–∞–ª—å—á—É–∫")
        return

    await state.update_data(name=name)
    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, <b>{data['name'].split()[0]}!</b> –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤!",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    age_text = message.text.strip()
    if not age_text.isdigit():
        await message.answer("–ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–∫ (—á–∏—Å–ª–æ–º)")
        return
    age_int = int(age_text)
    if age_int > 30:
        await message.answer("–•–µ–π –Ω–µ–≤–∂–µ —Ç–∏ —Ç–∞–∫–∏–π —Å—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≤—ñ–∫")
        return
    elif age_int < 16:
        await message.answer("–•–µ–π –Ω–µ–≤–∂–µ —Ç–∏ —Ç–∞–∫–∏–π –º–∞–ª–∏–π? –ù–∞–ø–∏—à–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≤—ñ–∫")
        return

    await state.update_data(age=age_int)
    await message.answer(
        "–ì–∞—Ä–Ω–∏–π –≤—ñ–∫! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏, –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ —Ç–∏ –Ω–∞–≤—á–∞—î—à—Å—èüòé",
        reply_markup=get_course_kb(),
        parse_mode="HTML"
    )
    await state.set_state(Registration.course)

@router.message(Registration.course)
async def ask_university_or_finish(message: types.Message, state: FSMContext):
    courses = ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å", "–ú–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–Ü–Ω—à–µ", "–ù–µ –Ω–∞–≤—á–∞—é—Å—å"]

    if message.text not in courses:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –û–±–µ—Ä–∏ –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É.")
        return
    
    if message.text == "–ù–µ –Ω–∞–≤—á–∞—é—Å—å":
        await message.answer(
            "–ù–∞ –∂–∞–ª—å, –º–∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ –∑–º–∞–≥–∞–Ω–Ω—è –ª–∏—à–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤.",
            reply_markup=get_reg_kb()
        )
        await state.clear()
        return

    await state.update_data(course=message.text)
  
    await message.answer("–ö—Ä—É—Ç–æ, –∞ –≤ —è–∫–æ–º—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–º—É –∑–∞–∫–ª–∞–¥—ñ –≤—á–∏—à—Å—è?", reply_markup=get_uni_kb())
    await state.set_state(Registration.university)

@router.message(Registration.university)
async def ask_speciality(message: types.Message, state: FSMContext):
    text = message.text.strip()
    unis = ["üéì –ù–£ ‚Äú–õ–ü‚Äù", "üéì –õ–ù–£ —ñ–º. –Ü. –§—Ä–∞–Ω–∫–∞", "üéì –£–ö–£", "üéì –Ü–Ω—à–∏–π"]

    if message.text == "üéì –Ü–Ω—à–∏–π":
        await message.answer("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.expect_custom_uni)
        return
    
    if message.text not in unis:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –û–±–µ—Ä–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑—ñ —Å–ø–∏—Å–∫—É.")
        return


    await state.update_data(university=text)

    await message.answer(
        "–°—É–ø–µ—Ä, –∞ –Ω–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —Å–≤–æ—ó —Ä–æ–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—à? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø–æ–≤–Ω—ñ—Å—Ç—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–æ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.speciality)

@router.message(Registration.expect_custom_uni)
async def process_custom_university(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    if not is_correct_text(text):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    await state.update_data(university=text)

    await message.answer(
        "–°—É–ø–µ—Ä, –∞ –Ω–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ —Å–≤–æ—ó —Ä–æ–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—à?\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ø–æ–≤–Ω—ñ—Å—Ç—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–æ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.speciality)

@router.message(Registration.speciality)
async def ask_where(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    if not is_correct_speciality(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏.")
        return

    await state.update_data(speciality=message.text)
    await message.answer(
        "–ê –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –ø–æ–¥—ñ–ª–∏—à—Å—è?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.email)

@router.message(Registration.email)
async def ask_approval(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    text = message.text.strip()
    if not is_valid_email(text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. —É —Ñ–æ—Ä–º–∞—Ç—ñ example@mail.com")
        return
    await state.update_data(email=text)
    await message.answer(
        "–ù—É –æ—Å—å –º–∏ —ñ –ø–æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—åüß°.\n–¢–µ–ø–µ—Ä –±–∞–≥–∞—Ç–æ –ø—Ä–æ —Ç–µ–±–µ –∑–Ω–∞—é. –î–∞—î—à –¥–æ–∑–≤—ñ–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó?",
        parse_mode="HTML",
        reply_markup=where_kb()
    ) 
    await state.set_state(Registration.approval)

@router.message(Registration.approval)
async def process_approval(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    data = await state.get_data()
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–º–æ–≤
    deny_count = data.get("deny_count", 0)

    if text == "—Ç–∞–∫":
        await save_user_data(
            user_id=message.from_user.id,
            user_name=message.from_user.username,
            name=data["name"],
            age=data["age"],
            course=data["course"],
            university=data["university"],
            speciality=data["speciality"],
            email=data["email"],
            team='-'
        )
        await message.answer(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –≤ Telegram-–±–æ—Ç—ñ.\n–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö —ñ –±—É—Ç–∏ –¥–æ–ø—É—â–µ–Ω–∏–º –¥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∑ 4 –ª—é–¥–µ–π.\n\n–î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ —á–∞—Ç—É —É—á–∞—Å–Ω–∏–∫—ñ–≤, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∞–±–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:<a href='https://t.me/+EqpOjlPkgRtjYmEy'> –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</a>",
            parse_mode="HTML",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    elif text == "–Ω—ñ":
        deny_count += 1
        await state.update_data(deny_count=deny_count)
        if deny_count >= 2:
            await message.answer(
                "–¢–∏ –¥–≤—ñ—á—ñ –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–≥–æ–¥–∏. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
                parse_mode="HTML",
                reply_markup=get_reg_kb()
            )
            await state.clear()
        else:
            await message.answer(
                "–î–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—è –∑–≥–æ–¥–∞",
                parse_mode="HTML",
                reply_markup=where_kb()
            )
    else:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ <b>–¢–∞–∫</b> –∞–±–æ <b>–ù—ñ</b>.",
            parse_mode="HTML",
            reply_markup=where_kb()
        )
