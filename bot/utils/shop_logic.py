# bot/utils/shop_logic.py (–ü–û–í–ù–ê –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø)

from aiogram import types
from bot.handlers.helpdesk import show_active_orders
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.choices import get_helpdesk_menu_kb
from bot.utils.td_dg import config_collection, products_collection, orders_collection
import datetime
from datetime import timezone

PHASE_NAMES = {
    0: "–ü–µ—Ä–µ–≥–ª—è–¥ (0 —Ö–≤)",
    1: "–ß–∞—Å—Ç–∫–æ–≤–∞ –∫—É–ø—ñ–≤–ª—è (20 —Ö–≤)",
    2: "–ü–æ–≤–Ω–∞ —Å–≤–æ–±–æ–¥–∞ (60 —Ö–≤)"
}
STATUS_EMOJI = {
    "new": "üïô –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ",
    "approved": "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–¥–∞—á—ñ",
    "rejected": "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
    "completed": "üëåüèª –û—Ç—Ä–∏–º–∞–Ω–æ"
}


async def get_shop_config():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É (—Å—Ç–∞—Ç—É—Å —Ç–∞ –ª—ñ–º—ñ—Ç–∏)."""
    status = await config_collection.find_one({"_id": "shop_status"}) or {}
    limits = await config_collection.find_one({"_id": "shop_limits"}) or {}
    return {
        "is_open": status.get("is_open", False),
        "phase": status.get("current_phase", 0),
        "quantity_limit": limits.get("quantity_per_purchase", 999),
        "purchase_interval_minutes": limits.get("purchase_interval_minutes", 5) 
    }


async def check_order_cooldown(team_name: str) -> tuple[bool, str]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¢–Ü–õ–¨–ö–ò —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏.
    –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∞—Ü—é—î –∑ —á–∞—Å–æ–≤–∏–º–∏ –∑–æ–Ω–∞–º–∏ (UTC).
    """
    config = await get_shop_config()
    interval_minutes = config["purchase_interval_minutes"]
    
    last_order = await orders_collection.find_one({"team_name": team_name}, sort=[("created_at", -1)])
    
    if last_order:
        last_order_time = last_order["created_at"]
        
        # --- –û–°–ù–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "—Å–≤—ñ–¥–æ–º–∏–π" —á–∞—Å UTC, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —á–∞—Å–æ–≤–∏—Ö –∑–æ–Ω.
        current_time = datetime.datetime.now(timezone.utc)
        # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

        time_passed = current_time - last_order_time
        required_interval = datetime.timedelta(minutes=interval_minutes)
        
        if time_passed < required_interval:
            time_to_wait = required_interval - time_passed
            remaining_seconds = time_to_wait.total_seconds()
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤–∏–≤—ñ–¥ —á–∞—Å—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if remaining_seconds > 60:
                remaining_minutes = int(remaining_seconds // 60)
                remaining_sec_part = int(remaining_seconds % 60)
                return False, f"–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ –ø–æ–∫—É–ø–∫–∏. –ó–∞—á–µ–∫–∞–π—Ç–µ"
            else:
                return False, f"–ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ –ø–æ–∫—É–ø–∫–∏. –ó–∞—á–µ–∫–∞–π—Ç–µ"
            
    return True, "OK"

async def check_item_rules(product_id, quantity: int) -> tuple[bool, str]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª–∞, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —Ç–æ–≤–∞—Ä—É (—Ñ–∞–∑–∏, –ª—ñ–º—ñ—Ç–∏).
    –ë–ï–ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –º—ñ–∂ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.
    """
    config = await get_shop_config()
    product = await products_collection.find_one({"_id": product_id})

    if not config["is_open"]:
        return False, "–ù–∞—Ä–∞–∑—ñ –º–∞–≥–∞–∑–∏–Ω –∑–∞—á–∏–Ω–µ–Ω–æ."
        
    phase = config["phase"]
    if phase == 0:
        return False, "–ü–æ–∫—É–ø–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ, –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É."
    
    if phase == 1:
        tier_str = product.get("description", "")
        if any(t in tier_str for t in ["Tier 4", "Tier 5", "Tier 6"]):
            return False, f"–¢–æ–≤–∞—Ä '{product['name']}' –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —Ñ–∞–∑—ñ –≥—Ä–∏."
        if "Tier 1" in tier_str and quantity > 1:
            return False, "–î–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ Tier 1 –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –ª–∏—à–µ 1 –æ–¥–∏–Ω–∏—Ü—é –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ñ–∞–∑—ñ."
        if "Tier 2" in tier_str and quantity > 3:
            return False, "–î–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ Tier 2 –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 –æ–¥–∏–Ω–∏—Ü—å –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ñ–∞–∑—ñ."
            
    if quantity > config["quantity_limit"]:
        return False, f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫—É–ø—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ {config['quantity_limit']} –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É –∑–∞ —Ä–∞–∑."

    return True, "OK"
