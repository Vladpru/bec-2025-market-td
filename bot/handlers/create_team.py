from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.handlers.about_event import AboutEventStates
from bot.keyboards.team import get_have_team_kb, get_back_kb
from bot.keyboards.no_team import get_category_kb, get_not_team_kb
from bot.utils.database import save_team_data, update_user_team, get_team_by_name
from uuid import uuid4
from aiogram.types import FSInputFile


router = Router()

class CreateTeam(StatesGroup):
    category = State()
    team_name = State()
    password = State()
    check_password = State()

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def process_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_not_team_kb())

@router.message(F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—Éü•á")
async def create_team(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(" –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–º–∞–≥–∞–Ω—å ", reply_markup=get_category_kb(with_back=True))
    await state.set_state(CreateTeam.category)

@router.message(CreateTeam.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await process_back(message, state)
        return
    valid_categories = ["Team Design", "Innovative Design"]
    if message.text == "–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó":
        await message.answer("–¢–æ —â–æ –∂, –ø–æ–∑–Ω–∞–π–æ–º–∏—à—Å—è –∑ –Ω–∞—à–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏? –ê —â–µ –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ü§´.\n\nInnovative Design\n\n–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –¥–µ —Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–æ—é –ø—Ä–∏–¥—É–º—É—î—à –Ω–æ–≤–µ –∞–±–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–µ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏. –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ —Ü–µ –ø—Ä–∞—Ü—é—î: —á–µ—Ä–µ–∑ –∫—Ä–µ—Å–ª–µ–Ω–Ω—è –∞–±–æ 3D-–º–æ–¥–µ–ª—ñ. –¢—É—Ç –≤–∞–∂–ª–∏–≤–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å, —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ—Å—Ç—å —ñ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ—Å—Ç—å —Ç–≤–æ—î—ó —ñ–¥–µ—ó.\n\nTeam Design\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –¥–µ —Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–æ—é –±—É–¥–µ—à —Ä–æ–∑–≤'—è–∑—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–¥–∞—á—ñ ‚Äì —É —Å—Ç–∏–ª—ñ –æ—Å—å –ø—Ä–æ–±–ª–µ–º–∞ ‚Äì –∑—Ä–æ–±—ñ—Ç—å –ø—Ä–∏—Å—Ç—Ä—ñ–π, —è–∫–∏–π —ó—ó –≤–∏—Ä—ñ—à—É—î. –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞, –º–µ—Ö–∞–Ω—ñ–∫–∞, IoT, embedded ‚Äì –≤—Å–µ —Ü–µ –ø—Ä–æ Team Design. –ù–∞ –≤–∏—Ö–æ–¥—ñ ‚Äì —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø.", reply_markup=get_category_kb(with_back=True))
        return
    if message.text not in valid_categories:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: Team Design –∞–±–æ Innovative Design.", reply_markup=get_category_kb(with_back=True))
        return
    await state.update_data(category=message.text)
    await message.answer(" –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏ ", reply_markup=get_back_kb())
    await state.set_state(CreateTeam.team_name)

@router.message(CreateTeam.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_category_kb(with_back=True))
        await state.set_state(CreateTeam.category)
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    existing_team = await get_team_by_name(message.text)
    if existing_team:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.", reply_markup=get_back_kb())
        return
    await state.update_data(team_name=message.text)
    await message.answer("–ì–∞—Ä–Ω–∞ –Ω–∞–∑–≤–∞! –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä–∏ –ø–∞—Ä–æ–ª—å –±—ñ–ª—å—à–µ –∑–∞ 5 —Å–∏–º–≤–æ–ª—ñ–≤. –ó–∞–≤–¥—è–∫–∏ –Ω—å–æ–º—É —ñ–Ω—à—ñ —É—á–∞—Å–Ω–∏–∫–∏ —É–≤—ñ–π–¥—É—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!", reply_markup=get_back_kb())
    await state.set_state(CreateTeam.password)

@router.message(CreateTeam.password)
async def process_team_password(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –∑ —è–∫–∏–º–∏ –ø—Ä–∞—Ü—é—î –∫–æ–º–∞–Ω–¥–∞ (—á–µ—Ä–µ–∑ –∫–æ–º—É):", reply_markup=get_back_kb())
        await state.set_state(CreateTeam.technologies)
        return
    if len(message.text) < 5:
        await message.answer("–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –±—ñ–ª—å—à–µ –∑–∞ 5 —Å–∏–º–≤–æ–ª—ñ–≤:", reply_markup=get_back_kb())
        return
    await state.update_data(password=message.text)
    await message.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –ø–∞—Ä–æ–ª—å (–Ω–∞–ø–∏—à–∏ –π–æ–≥–æ –∑–∞–Ω–æ–≤–æ)", reply_markup=get_back_kb())
    await state.set_state(CreateTeam.check_password)

@router.message(CreateTeam.check_password)
async def process_team_check_password(message: types.Message, state: FSMContext):
    if message.text is None:
        await message.answer("üö´ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏:", reply_markup=get_back_kb())
        await state.set_state(CreateTeam.password)
        return
    data = await state.get_data()
    if data["password"] != message.text:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:", reply_markup=get_back_kb())
        await state.set_state(CreateTeam.check_password)
        return

    team_id = str(uuid4())
    await save_team_data(
        team_id=team_id,
        team_name=data["team_name"],
        category=data["category"],
        password=data["password"],
        members_telegram_ids=[message.from_user.id]
    )

    await message.answer(
        f"–°—É–ø–µ—Ä! –ö–æ–º–∞–Ω–¥—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!",
        reply_markup=get_have_team_kb()
    )
    await update_user_team(user_id=message.from_user.id, team_id=team_id)

    await state.clear()
