from aiogram import F, Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from bot.handlers.captain_shop import CaptainActions 
from bot.utils.sheetslogger import log_action
from bot.utils.td_dg import users_collection
from bot.keyboards.choices import captain_menu_kb

router = Router()

# --- 1. –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –°–ö–ê–°–£–í–ê–ù–ù–Ø ---
@router.message(Command("cancel"))
@router.message(F.text.casefold() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=captain_menu_kb)

# --- 2. –ó–ê–ü–ò–¢ –ù–ê –û–ë–ú–Ü–ù ---
@router.callback_query(F.data == "captain_exchange")
async def request_exchange_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CaptainActions.writing_exchange_request)
    await state.update_data(message_to_delete=callback.message.message_id)
    
    await callback.message.edit_text(
        "üîÑ **–ó–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω**\n\n"
        "–û–ø–∏—à—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏ —ñ –Ω–∞ —â–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "`–û–±–º—ñ–Ω—è—Ç–∏ 2 —Ä–µ–∑–∏—Å—Ç–æ—Ä–∏ –Ω–∞ 1 —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ç–æ—Ä 5V`\n\n"
        "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="captain_main_menu")]])
    )
    await callback.answer()

@router.message(CaptainActions.writing_exchange_request)
async def process_exchange_request(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    request_text = message.text
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ù–ï–ì–ê–ô–ù–û, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–∞—Ü—é–≤–∞–Ω—å
    await state.clear()
    
    try:
        message_id_to_delete = data.get("message_to_delete")
        if message_id_to_delete:
            await bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)

        user = await users_collection.find_one({"telegram_id": str(message.from_user.id)})
        if not user:
            return await message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.")
            
        team_name = user.get("team_name", "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        username = message.from_user.username or "N/A"

        # --- –û–ù–û–í–õ–ï–ù–ò–ô –¢–ï–ö–°–¢ –°–ü–û–í–Ü–©–ï–ù–ù–Ø ---
        helpdesk_message = (
            f"**üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –û–ë–ú–Ü–ù**\n\n"
            f"**–í—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:** {team_name}\n"
            f"**–ö–∞–ø—ñ—Ç–∞–Ω:** @{username}\n\n"
            f"**–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É:**\n"
            f"```{request_text}```\n\n"
            f"**–î—ñ—è:** –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–∞–ø—ñ—Ç–∞–Ω–æ–º –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–±–º—ñ–Ω—É."
        )
        
        helpdesk_users = await users_collection.find({"role": "helpdesk"}).to_list(length=None)
        if not helpdesk_users:
            print("–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ HelpDesk –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
        
        for hd_user in helpdesk_users:
            hd_telegram_id = hd_user.get("telegram_id")
            if hd_telegram_id:
                try:
                    await bot.send_message(int(hd_telegram_id), helpdesk_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è HelpDesk {hd_telegram_id}: {e}")

        await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ HelpDesk. –û—á—ñ–∫—É–π—Ç–µ, –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è.", reply_markup=captain_menu_kb)
        await log_action("Exchange Request", message.from_user.id, username, team_name, request_text)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–±–º—ñ–Ω: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=captain_menu_kb)

# --- 3. –ó–ê–ü–ò–¢ –ù–ê –ü–û–í–ï–†–ù–ï–ù–ù–Ø ---
@router.callback_query(F.data == "captain_return")
async def request_return_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CaptainActions.writing_return_request)
    await state.update_data(message_to_delete=callback.message.message_id)
    
    await callback.message.edit_text(
        "‚Ü©Ô∏è **–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è**\n\n"
        "–û–ø–∏—à—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "`–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ 1 Arduino nano, –Ω–µ –ø—ñ–¥—ñ–π—à–æ–≤`\n\n"
        "–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="captain_main_menu")]])
    )
    await callback.answer()
@router.message(CaptainActions.writing_return_request)
async def process_return_request(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    request_text = message.text

    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ù–ï–ì–ê–ô–ù–û
    await state.clear()
    
    try:
        message_id_to_delete = data.get("message_to_delete")
        if message_id_to_delete:
            await bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)

        user = await users_collection.find_one({"telegram_id": str(message.from_user.id)})
        if not user:
            return await message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.")
            
        team_name = user.get("team_name", "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        username = message.from_user.username or "N/A"

        # --- –û–ù–û–í–õ–ï–ù–ò–ô –¢–ï–ö–°–¢ –°–ü–û–í–Ü–©–ï–ù–ù–Ø ---
        helpdesk_message = (
            f"**‚Ü©Ô∏è –ó–∞–ø–∏—Ç –Ω–∞ –ü–û–í–ï–†–ù–ï–ù–ù–Ø**\n\n"
            f"**–í—ñ–¥ –∫–æ–º–∞–Ω–¥–∏:** {team_name}\n"
            f"**–ö–∞–ø—ñ—Ç–∞–Ω:** @{username}\n\n"
            f"**–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É:**\n"
            f"```{request_text}```\n\n"
            f"**–î—ñ—è:** –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–∞–ø—ñ—Ç–∞–Ω–æ–º, —â–æ–± –æ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä —Ç–∞ —É–∑–≥–æ–¥–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è."
        )
        
        helpdesk_users = await users_collection.find({"role": "helpdesk"}).to_list(length=None)
        if not helpdesk_users:
            print("–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ HelpDesk –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
        
        for hd_user in helpdesk_users:
            hd_telegram_id = hd_user.get("telegram_id")
            if hd_telegram_id:
                try:
                    await bot.send_message(int(hd_telegram_id), helpdesk_message, parse_mode="Markdown")
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è HelpDesk {hd_telegram_id}: {e}")

        await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ HelpDesk. –û—á—ñ–∫—É–π—Ç–µ, –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è.", reply_markup=captain_menu_kb)
        await log_action("Return Request", message.from_user.id, username, team_name, request_text)
    
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=captain_menu_kb)
    
# --- 4. –î–û–í–Ü–î–ö–ê ---

@router.callback_query(F.data == "captain_help")
async def show_help(callback: types.CallbackQuery):
    try:
        instruction_file = FSInputFile("–Ü–Ω—Å—Ç—É–∫—Ü—ñ—è –ö–∞–ø—ñ—Ç–∞–Ω.pdf")
        await callback.message.answer_document(instruction_file, caption="‚úèÔ∏è –¶–µ–π —Ñ–∞–π–ª –¥–æ–ø–æ–º–æ–∂–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞")
    except FileNotFoundError:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)