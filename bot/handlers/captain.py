
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bson.objectid import ObjectId

# –í–∞–∂–ª–∏–≤–æ: —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
from bot.keyboards.registration import hello_menu_kb
from bot.utils.shop_logic import STATUS_EMOJI
from bot.utils.td_dg import (
    products_collection, users_collection, orders_collection, is_team_password_correct
)
from bot.utils.database import is_team_exist_password, is_team_exist
from bot.utils.sheetslogger import log_action 
from bot.keyboards.choices import captain_menu_kb
from bot.handlers.captain_shop import CaptainActions

router = Router()

class CaptainLogin(StatesGroup):
    team_name = State()
    password = State()

# --- –ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø ---
@router.message(F.text == "–ö–æ–º–∞–Ω–¥–∏—Ä –∫–æ–º–∞–Ω–¥–∏")
async def captain_login_start(message: types.Message, state: FSMContext):
    await state.set_state(CaptainLogin.team_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=ReplyKeyboardRemove())

INITIAL_BUDGET = 1500

@router.message(CaptainLogin.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î –∫–æ–º–∞–Ω–¥–∞. –Ø–∫—â–æ —Ç–∞–∫ - –∑–∞–ø–∏—Ç—É—î –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É.
    –Ø–∫—â–æ –Ω—ñ - –ø—Ä–æ–ø–æ–Ω—É—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É, –∑–∞–ø–∏—Ç—É—é—á–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–µ—ó.
    """
    team_name = message.text
    
    await state.update_data(team_name=team_name)
    await state.set_state(CaptainLogin.password)

    if await is_team_exist(team_name):
        # –°—Ü–µ–Ω–∞—Ä—ñ–π –í–•–û–î–£: –∫–æ–º–∞–Ω–¥–∞ –≤–∂–µ —ñ—Å–Ω—É—î
        await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É:")
    else:
        await state.clear()
        await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞—Å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=hello_menu_kb)

@router.message(CaptainLogin.password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    team_name = user_data.get("team_name")

    # –ó–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ–º–∞–Ω–¥–∞, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, –≤ —è–∫–æ–º—É –º–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    existing_team = await users_collection.find_one({"team_name": team_name})

    if await is_team_exist_password(team_name, password):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        existing_user = await users_collection.find_one({"telegram_id": str(message.from_user.id)})

        if existing_user:
            # –Ø–∫—â–æ –∑–∞–ø–∏—Å —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
            await users_collection.update_one(
            {"telegram_id": str(message.from_user.id)},
            {"$set": {
                "team_name": team_name,
                "username": message.from_user.username,
                "role": "captain"
            }}
            )
        else:
            # –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            await users_collection.insert_one({
            "telegram_id": str(message.from_user.id),
            "username": message.from_user.username,
            "team_name": team_name,
            "role": "captain",
            "budget": INITIAL_BUDGET  # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±—é–¥–∂–µ—Ç
            })

        await state.clear()
        await message.answer(f"‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –í—ñ—Ç–∞—î–º–æ, –∫–æ–º–∞–Ω–¥–∏—Ä–µ {team_name}!", reply_markup=captain_menu_kb)
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ")

# --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
@router.callback_query(F.data == "captain_main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=captain_menu_kb)

# --- –ë–ê–õ–ê–ù–° ---
@router.callback_query(F.data == "captain_coupons")
async def show_coupons(callback: types.CallbackQuery):
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –ø—Ä—è–º–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞ –Ω–µ –∑ teams_collection
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏.", show_alert=True)
        return

    budget = user.get('budget', 0)
    await callback.message.edit_text(f"üéüÔ∏è –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{budget}** –∫—É–ø–æ–Ω—ñ–≤.", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))

# --- –ú–û–á –ú–ê–¢–ï–†–Ü–ê–õ–ò ---
@router.callback_query(F.data == "captain_materials")
async def show_materials(callback: types.CallbackQuery):
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user: return # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ –Ω–∞–∑–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    team_name = user.get("team_name")
    completed_orders = await orders_collection.find({"team_name": team_name, "status": "completed"}).to_list(length=None)
    
    owned_items = {}
    for order in completed_orders:
        for item in order['items']:
            owned_items[item['product_name']] = owned_items.get(item['product_name'], 0) + item['quantity']
            
    text = "üì¶ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:\n\n" if owned_items else "üì¶ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤."
    for name, quantity in owned_items.items():
        text += f"üîπ **{name}** - {quantity} —à—Ç.\n"
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]]))

@router.callback_query(F.data == "captain_orders")
async def show_orders_history(callback: types.CallbackQuery):
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    if not user:
        return await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ.", show_alert=True)

    team_name = user.get("team_name")
    team_orders = await orders_collection.find({"team_name": team_name}).sort("created_at", -1).to_list(length=100)

    if not team_orders:
        return await callback.message.edit_text(
            "üìú –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="captain_main_menu")]])
        )

    await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –º–µ–Ω—é
    await callback.message.answer(f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ–º–∞–Ω–¥–∏ {team_name}:**", parse_mode="Markdown")

    for order in team_orders:
        date_str = order.get('created_at').strftime('%Y-%m-%d %H:%M') if order.get('created_at') else '–Ω–µ–≤—ñ–¥–æ–º–æ'
        status_text = STATUS_EMOJI.get(order.get('status'), '–ù–µ–≤—ñ–¥–æ–º–æ')
        
        order_details = f"**–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.get('order_number')}** –≤—ñ–¥ {date_str}\n–°—Ç–∞—Ç—É—Å: {status_text}\n"
        if order.get('status') == 'rejected' and order.get('rejection_reason'):
            order_details += f"–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: *{order['rejection_reason']}*\n"
        
        order_details += "–°–∫–ª–∞–¥:\n"
        for item in order.get('items', []):
            order_details += f" - {item.get('product_name')}: {item.get('quantity')} —à—Ç.\n"

        keyboard = None
        # –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–∞—á—ñ, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if order.get('status') == 'approved':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëåüèª –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data=f"confirm_receipt_{order['_id']}")]
            ])
        
        await callback.message.answer(order_details, reply_markup=keyboard, parse_mode="Markdown")
        
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Å—Ç–∞–Ω–Ω—ñ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    await callback.message.answer("---", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª. –º–µ–Ω—é", callback_data="captain_main_menu")]]))

@router.callback_query(F.data.startswith("confirm_receipt_"))
async def confirm_receipt(callback: types.CallbackQuery, state: FSMContext):
    order_id = ObjectId(callback.data.split("_")[-1])
    
    updated_order = await orders_collection.find_one_and_update(
        {"_id": order_id, "status": "approved"},
        {"$set": {"status": "completed"}},
        return_document=True
    )

    if not updated_order:
        return await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", show_alert=True)

    await callback.message.edit_text(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{updated_order['order_number']}!")
    
    user = await users_collection.find_one({"telegram_id": str(callback.from_user.id)})
    await log_action(
        action="Order Receipt Confirmed",
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        team_name=user.get('team_name'),
        details=f"Order #{updated_order['order_number']}"
    )
