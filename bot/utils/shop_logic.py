# bot/utils/shop_logic.py (–ü–û–í–ù–ê –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø)

from aiogram import types
from bot.handlers.helpdesk import show_active_orders
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.choices import get_helpdesk_menu_kb
from bot.utils.td_dg import config_collection, products_collection, orders_collection
import datetime
from datetime import timezone

PHASE_NAMES = {
    0: "–ü–µ—Ä–µ–≥–ª—è–¥ (0 —Ö–≤)",
    1: "–ß–∞—Å—Ç–∫–æ–≤–∞ –∫—É–ø—ñ–≤–ª—è (20 —Ö–≤)",
    2: "–ü–æ–≤–Ω–∞ —Å–≤–æ–±–æ–¥–∞ (60 —Ö–≤)"
}
STATUS_EMOJI = {
    "new": "üïô –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ",
    "approved": "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–¥–∞—á—ñ",
    "rejected": "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
    "completed": "üëåüèª –û—Ç—Ä–∏–º–∞–Ω–æ"
}


async def get_shop_config():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É (—Å—Ç–∞—Ç—É—Å —Ç–∞ –ª—ñ–º—ñ—Ç–∏)."""
    status = await config_collection.find_one({"_id": "shop_status"}) or {}
    limits = await config_collection.find_one({"_id": "shop_limits"}) or {}
    return {
        "is_open": status.get("is_open", False),
        "phase": status.get("current_phase", 0),
        "quantity_limit": limits.get("quantity_per_purchase", 999),
        "purchase_interval_minutes": limits.get("purchase_interval_minutes", 5) 
    }

from bot.utils.td_dg import orders_collection # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —ñ–º–ø–æ—Ä—Ç —î
from datetime import datetime, timedelta, timezone

async def check_order_cooldown(team_name: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–∏–Ω—É–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É 10 —Ö–≤–∏–ª–∏–Ω –∑ –º–æ–º–µ–Ω—Ç—É –û–°–¢–ê–ù–ù–¨–û–ì–û –£–°–ü–Ü–®–ù–û–ì–û –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    –°–∫–∞—Å–æ–≤–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è.
    """
    shop_config = await config_collection.find_one({"_id": "shop_limits"}) or {}
    ORDER_INTERVAL_MINUTES = shop_config.get("purchase_interval_minutes", 4)

    # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'
    last_completed_order = await orders_collection.find_one(
        {"team_name": team_name, "status": "completed"},
        sort=[("created_at", -1)]
    )

    if not last_completed_order:
        return True, "–î–æ–∑–≤–æ–ª–µ–Ω–æ, —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ."

    time_since_last_order = datetime.now(timezone.utc) - last_completed_order['created_at']
    
    if time_since_last_order < timedelta(minutes=ORDER_INTERVAL_MINUTES):
        remaining_time = timedelta(minutes=ORDER_INTERVAL_MINUTES) - time_since_last_order
        minutes, seconds = divmod(int(remaining_time.total_seconds()), 60)
        return False, f"–í–∏ –∑–º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {minutes} —Ö–≤ {seconds} —Å–µ–∫."
        
    return True, "–î–æ–∑–≤–æ–ª–µ–Ω–æ."

async def check_item_rules(product_id, quantity: int) -> tuple[bool, str]:
    config = await get_shop_config()
    product = await products_collection.find_one({"_id": product_id})

    if not config["is_open"]:
        return False, "–ù–∞—Ä–∞–∑—ñ –º–∞–≥–∞–∑–∏–Ω –∑–∞—á–∏–Ω–µ–Ω–æ."
        
    phase = config["phase"]
    if phase == 0:
        return False, "–ü–æ–∫—É–ø–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ, –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É."
    
    if phase == 1:
        tier_str = product.get("description", "")
        if any(t in tier_str for t in ["Tier 4", "Tier 5", "Tier 6"]):
            return False, f"–¢–æ–≤–∞—Ä '{product['name']}' –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —Ñ–∞–∑—ñ –≥—Ä–∏."
        if "Tier 1" in tier_str and quantity > 1:
            return False, "–î–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ Tier 1 –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –ª–∏—à–µ 1 –æ–¥–∏–Ω–∏—Ü—é –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ñ–∞–∑—ñ."
        if "Tier 2" in tier_str and quantity > 3:
            return False, "–î–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ Tier 2 –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 –æ–¥–∏–Ω–∏—Ü—å –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ñ–∞–∑—ñ."
        if "Tier 3" in tier_str and quantity > 3:
            return False, "–î–ª—è —Ç–æ–≤–∞—Ä—ñ–≤ Tier 3 –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 –æ–¥–∏–Ω–∏—Ü—å –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ñ–∞–∑—ñ."

    elif phase == 2:
        allowed_quantity = product.get("allowed_to_buy")
        if allowed_quantity is not None and quantity > allowed_quantity:
            return False, f"–î–ª—è —Ç–æ–≤–∞—Ä—É '{product['name']}' –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º {allowed_quantity} —à—Ç."

    return True, "OK"