# bot/handlers/admin/analytics_handlers.py
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.utils.td_dg import orders_collection, users_collection, products_collection

router = Router()

def get_analytics_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å", callback_data="analytics_sold_units")],
        [InlineKeyboardButton(text="üí∏ –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∫—É–ø–æ–Ω—ñ–≤", callback_data="analytics_avg_spent")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_menu_back")]
    ])

@router.callback_query(F.data == "admin_view_analytics")
async def analytics_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("üìä –ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫:", reply_markup=get_analytics_menu_kb())

@router.callback_query(F.data == "analytics_sold_units")
async def show_sold_units(callback: types.CallbackQuery):
    # –£–í–ê–ì–ê: –¶–µ–π –∫–æ–¥ –∑–∞–ø—Ä–∞—Ü—é—î, –∫–æ–ª–∏ —É –≤–∞—Å –±—É–¥–µ –∫–æ–ª–µ–∫—Ü—ñ—è 'orders' –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    # —Ñ–æ—Ä–º–∞—Ç—É: { ..., status: "completed", items: [{product_id: ..., quantity: ...}] }
    pipeline = [
        {"$match": {"status": "completed"}},
        {"$unwind": "$items"},
        {"$group": {"_id": "$items.product_id", "total_sold": {"$sum": "$items.quantity"}}},
        {"$sort": {"total_sold": -1}}
    ]
    sold_items_cursor = orders_collection.aggregate(pipeline)
    sold_items = await sold_items_cursor.to_list(length=None)

    if not sold_items:
        await callback.answer("–î–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ —â–µ –Ω–µ–º–∞—î.", show_alert=True)
        return

    response_text = "üìà –ü—Ä–æ–¥–∞–Ω–æ –æ–¥–∏–Ω–∏—Ü—å:\n\n"
    for item in sold_items:
        product = await products_collection.find_one({"_id": item['_id']})
        product_name = product['name'] if product else "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä"
        response_text += f"**{product_name}**: {item['total_sold']} —à—Ç.\n"
    
    await callback.message.edit_text(response_text, reply_markup=get_analytics_menu_kb(), parse_mode="Markdown")

@router.callback_query(F.data == "analytics_avg_spent")
async def show_avg_spent(callback: types.CallbackQuery):
    """
    –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó 'users'.
    """
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –∫–æ–º–∞–Ω–¥
    unique_teams_list = await users_collection.distinct("team_name")
    total_teams = len(unique_teams_list)

    if total_teams == 0:
        await callback.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.", show_alert=True)
        return
        
    pipeline = [
        {"$match": {"status": "completed"}},
        {"$group": {"_id": None, "total_spent": {"$sum": "$total_cost"}}} # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —î –ø–æ–ª–µ total_cost
    ]
    result_cursor = orders_collection.aggregate(pipeline)
    result = await result_cursor.to_list(length=1)
    
    total_spent = result[0]['total_spent'] if result else 0
    avg_spent = round(total_spent / total_teams, 2)
    
    response_text = f"üí∏ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∫—É–ø–æ–Ω—ñ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É: **{avg_spent}** –∫—É–ø–æ–Ω—ñ–≤."
    await callback.message.edit_text(response_text, reply_markup=get_analytics_menu_kb(), parse_mode="Markdown")