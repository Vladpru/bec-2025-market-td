# bot/handlers/admin.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.choices import get_admin_menu_kb
from os import getenv
from bson.objectid import ObjectId # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ ID –∑ MongoDB

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó
from bot.utils.td_dg import products_collection, config_collection, teams_collection, orders_collection

router = Router()

# --- –°—Ç–∞–Ω–∏ (FSM) ---
class AdminLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    quantity = State()

class EditProduct(StatesGroup):
    choosing_field = State()
    waiting_for_new_value = State()

class DeleteProduct(StatesGroup):
    confirming_delete = State()

class SetLimits(StatesGroup):
    waiting_for_quantity_limit = State()
    waiting_for_partial_time = State()
    waiting_for_full_time = State()
    waiting_for_interval = State()

# –¶–µ–π —Å–ª–æ–≤–Ω–∏–∫-–º–∞–ø–∞ –≤–∏—Ä—ñ—à—É—î –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É
FIELD_MAP = {
    "name": "name",
    "description": "description",
    "price": "base_price_uah",  # <--- –û—Å—å —Ç—É—Ç –º–∏ –≤–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –¥–ª—è —Ü—ñ–Ω–∏
    "quantity": "stock_quantity" # <--- –Ü —Ç—É—Ç –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, –≤–∏—Ö–æ–¥—è—á–∏ –∑ –≤–∞—à–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
}

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–ë–µ–∑ –∑–º—ñ–Ω) ---
@router.message(F.text == "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä")
async def cmd_organizer_start(message: types.Message, state: FSMContext):
    await state.set_state(AdminLogin.waiting_for_login)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(AdminLogin.waiting_for_login)
async def process_admin_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(AdminLogin.waiting_for_password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:")

@router.message(AdminLogin.waiting_for_password)
async def process_admin_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get("login")
    password = message.text
    expected_login, expected_password = getenv("ORGANIZER_LOGIN"), getenv("ORGANIZER_PASSWORD")
    if login == expected_login and password == expected_password:
        await state.clear()
        await message.answer("–í—ñ—Ç–∞—î–º–æ, –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=get_admin_menu_kb())
    else:
        await state.set_state(AdminLogin.waiting_for_login)
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n\n–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:")

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ ---
@router.callback_query(F.data == "admin_menu_back")
async def admin_menu_back(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ñ—Ç–∞—î–º–æ, –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=get_admin_menu_kb())

# --- –ë–õ–û–ö 1: –ö–ï–†–£–í–ê–ù–ù–Ø –¢–û–í–ê–†–ê–ú–ò (CRUD) ---
def get_manage_items_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="crud_add_item")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="crud_edit_item_list")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="crud_delete_item_list")],
        [InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="crud_view_items")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_menu_back")]
    ])

@router.callback_query(F.data == "admin_manage_items")
async def manage_items_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_manage_items_kb())

# --- –ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É FSM –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---

# 1. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, —è–∫–∏–π —Ä–µ–∞–≥—É—î –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"
@router.callback_query(F.data == "crud_add_item")
async def add_item_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–µ—Ä—à–∏–π —Å—Ç–∞–Ω (–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏)
    —ñ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É.
    """
    await state.set_state(AddProduct.name)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ edit_text, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    await callback.answer()

# 2. –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, –∑–±–µ—Ä—ñ–≥–∞—î —ó—ó —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å
@router.message(AddProduct.name)
async def add_item_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –Ω–∞–∑–≤—É, –∑–±–µ—Ä—ñ–≥–∞—î —ó—ó —É —Å—Ç–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.
    """
    await state.update_data(name=message.text)
    await state.set_state(AddProduct.description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

# 3. –û—Ç—Ä–∏–º—É—î –æ–ø–∏—Å, –∑–±–µ—Ä—ñ–≥–∞—î —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ —Ü—ñ–Ω—É
@router.message(AddProduct.description)
async def add_item_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –æ–ø–∏—Å, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏.
    """
    await state.update_data(description=message.text)
    await state.set_state(AddProduct.price)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")

# 4. –û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω—É, –≤–∞–ª—ñ–¥—É—î —ó—ó, –∑–±–µ—Ä—ñ–≥–∞—î —ñ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
@router.message(AddProduct.price)
async def add_item_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î —Ü—ñ–Ω—É, –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –≤–æ–Ω–∞ —á–∏—Å–ª–æ–º, —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.
    """
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Ü—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return # –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É
        
    await state.update_data(price_coupons=int(message.text)) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —á–∏—Å–ª–æ
    await state.set_state(AddProduct.quantity)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")

# 5. –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –≤–∞–ª—ñ–¥—É—î, –∑–±–µ—Ä—ñ–≥–∞—î –≤ –ë–î —ñ –∑–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å
@router.message(AddProduct.quantity)
async def add_item_quantity(message: types.Message, state: FSMContext):
    """
    –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫. –û–±—Ä–æ–±–ª—è—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∑–±–∏—Ä–∞—î –≤—Å—ñ –¥–∞–Ω—ñ,
    –∑–∞–ø–∏—Å—É—î —ó—Ö –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ –æ—á–∏—â—É—î —Å—Ç–∞–Ω.
    """
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(stock_quantity=int(message.text), initial_stock_quantity=int(message.text)) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —á–∏—Å–ª–æ
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    product_data = await state.get_data()
    
    # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –≤–∞—à–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–æ–ª—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    product_data.setdefault('base_price_uah', 0)
    product_data.setdefault('coefficient', 1.0)
    
    print(f"–î–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î: {product_data}")

    try:
        # –ó–∞–ø–∏—Å—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–ª–µ–∫—Ü—ñ—é
        await products_collection.insert_one(product_data)
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, –∑–∞–≤–µ—Ä—à—É—é—á–∏ FSM
        await state.clear()
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—Ö —ñ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_data['name']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.",
            reply_markup=get_admin_menu_kb()
        )
    except Exception as e:
        print(f"!!! –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ MongoDB: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–æ–º–∏–ª–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()


@router.callback_query(F.data == "crud_edit_item_list")
async def list_items_for_edit(callback: types.CallbackQuery, state: FSMContext):
    products = await products_collection.find({}).to_list(length=100)
    if not products:
        await callback.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p['name'], callback_data=f"edit_item_{p['_id']}")] for p in products
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_items")]])
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_item_"))
async def choose_edit_field(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_")[2]
    product = await products_collection.find_one({"_id": ObjectId(product_id)})
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    await state.update_data(product_id=product_id)
    await state.set_state(EditProduct.choosing_field)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="–û–ø–∏—Å", callback_data="edit_field_description")],
        [InlineKeyboardButton(text="–¶—ñ–Ω–∞", callback_data="edit_field_price")],
        [InlineKeyboardButton(text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="edit_field_quantity")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="crud_edit_item_list")]
    ])
    await callback.message.edit_text(f"–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–ª—è '{product['name']}'?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_field_"))
async def request_new_value(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[2] # "price", "quantity" —ñ —Ç.–¥.
    await state.update_data(field_to_edit=field)
    await state.set_state(EditProduct.waiting_for_new_value)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field}':")


@router.message(EditProduct.waiting_for_new_value)
async def save_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("product_id")
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –ø–æ–ª—è –∑ callback_data (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "price")
    field_key = data.get("field_to_edit") 
    new_value = message.text

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if field_key in ["price", "quantity"] and not new_value.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Ü—ñ–Ω–∞ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–ø—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –ø–æ–ª—è –≤ –ë–î
    db_field_name = FIELD_MAP.get(field_key)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤ –º–∞–ø—ñ –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞
    if not db_field_name:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        await state.clear()
        return

    update_value = int(new_value) if field_key in ["price", "quantity"] else new_value
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –ø–æ–ª—è –∑ –º–∞–ø–∏
    await products_collection.update_one(
        {"_id": ObjectId(product_id)}, 
        {"$set": {db_field_name: update_value}}
    )
    
    product = await products_collection.find_one({"_id": ObjectId(product_id)})
    
    await state.clear()
    await message.answer(f"–¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_admin_menu_kb())

# 1.3 –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@router.callback_query(F.data == "crud_delete_item_list")
async def list_items_for_delete(callback: types.CallbackQuery):
    products = await products_collection.find({}).to_list(length=100)
    if not products:
        await callback.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p['name'], callback_data=f"delete_item_{p['_id']}")] for p in products
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_items")]])
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_item_"))
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_")[2]
    product = await products_collection.find_one({"_id": ObjectId(product_id)})
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
        
    await state.update_data(product_id_to_delete=product_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_confirm_yes"),
            InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="crud_delete_item_list")
        ]
    ])
    await callback.message.edit_text(f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ '{product['name']}'?", reply_markup=keyboard)

@router.callback_query(F.data == "delete_confirm_yes")
async def execute_delete(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("product_id_to_delete")
    product = await products_collection.find_one({"_id": ObjectId(product_id)})
    await products_collection.delete_one({"_id": ObjectId(product_id)})
    await state.clear()
    await callback.message.edit_text(f"–¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=get_admin_menu_kb())

# 1.4 –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤
@router.callback_query(F.data == "crud_view_items")
async def view_items(callback: types.CallbackQuery):
    products = await products_collection.find({}).to_list(length=100)
    if not products:
        await callback.message.edit_text("–¢–æ–≤–∞—Ä—ñ–≤ —â–µ –Ω–µ–º–∞—î.", reply_markup=get_manage_items_kb())
        return
    response_text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n"
    for p in products:
        response_text += (f"**{p.get('name')}**\n"
                          f"- –¶—ñ–Ω–∞: {p.get('base_price_uah')}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {p.get('quantity_description')}\n"
                          f"- –û–ø–∏—Å: {p.get('description')}\n---\n")
    await callback.message.edit_text(response_text, reply_markup=get_manage_items_kb(), parse_mode="Markdown")


# --- –ü–ï–†–ï–†–ê–•–£–í–ê–ù–ù–Ø –¶–Ü–ù ---

async def update_all_prices():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä–∞—Ö —ñ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î —ó—Ö —Ü—ñ–Ω–∏.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
    """
    all_products = await products_collection.find({}).to_list(length=None)
    unique_teams_list = await teams_collection.distinct("team_name")
    total_teams = len(unique_teams_list)
    updated_count = 0

    for product in all_products:
        base_price = product.get('base_price_uah', 0)
        coeff = product.get('coefficient', 1.0)
        new_price = base_price * coeff

        # 1. –ú–µ—Ö–∞–Ω—ñ–∑–º –¥–µ—Ñ—ñ—Ü–∏—Ç—É
        initial_stock = product.get('initial_stock_quantity')
        current_stock = product.get('stock_quantity')
        if initial_stock and initial_stock > 0 and (current_stock / initial_stock) < 0.3:
            new_price *= 1.5  # +50% –¥–æ —Ü—ñ–Ω–∏ –ø—Ä–∏ –¥–µ—Ñ—ñ—Ü–∏—Ç—ñ

        # 2. –ú–µ—Ö–∞–Ω—ñ–∑–º –≤–∏—Å–æ–∫–æ–≥–æ –ø–æ–ø–∏—Ç—É
        if total_teams > 0:
            teams_bought_cursor = orders_collection.distinct(
                "team_name", 
                {"status": "completed", "items.product_id": product['_id']}
            )
            teams_bought = len(teams_bought_cursor)
            if (teams_bought / total_teams) > 0.5:
                new_price *= 1.3 # +30% –¥–æ —Ü—ñ–Ω–∏ –ø—Ä–∏ –≤–∏—Å–æ–∫–æ–º—É –ø–æ–ø–∏—Ç—ñ

        # 3. –ú–µ—Ö–∞–Ω—ñ–∑–º –∫—ñ–Ω—Ü—è –≥—Ä–∏ (–ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ)

        final_price = round(new_price)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –≤ –ë–î, —è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
        if final_price != product.get('price_coupons'):
            await products_collection.update_one(
                {"_id": product['_id']},
                {"$set": {"price_coupons": final_price}}
            )
            updated_count += 1
            
    return updated_count

@router.callback_query(F.data == "admin_recalculate_prices")
async def recalculate_prices_handler(callback: types.CallbackQuery):
    await callback.answer("‚è≥ –ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å...", show_alert=False)
    
    try:
        updated_count = await update_all_prices()
        await callback.message.answer(f"‚úÖ –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–Ω–æ–≤–ª–µ–Ω–æ —Ü—ñ–Ω: {updated_count}.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω: {e}")
        await callback.message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω.")
