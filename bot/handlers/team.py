from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot.keyboards.team import get_have_team_kb
from bot.utils.database import get_team, exit_team, get_team_category
from bot.keyboards.no_team import get_not_team_kb

router = Router()

class Team(StatesGroup):
    confirm_exit = State()
    waiting_for_stack_input = State()

@router.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É‚ÑπÔ∏è")
async def info_team_handler(message: types.Message, state: FSMContext):
    from bot.utils.database import users_collection
    user_id = message.from_user.id
    team = await get_team(user_id)
    if team:
        member_ids = team.get("members", [])
        usernames = []
        if member_ids:
            member = users_collection.find({"_id": {"$in": member_ids}})
            async for user in member:
                username = user.get("username")
                name = user.get("name")
                if username:
                    usernames.append(f"@{username}")
                elif name:
                    usernames.append(name)
                else:
                    usernames.append("–ë–µ–∑ —ñ–º–µ–Ω—ñ")
        members_str = "\n".join(usernames) if usernames else "–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        await message.answer(
            f"–ö–æ–º–∞–Ω–¥–∞ '{team['team_name']}'!\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {team['category']}\n\n"
            f"–£—á–∞—Å–Ω–∏–∫–∏:\n{members_str}",
            parse_mode="HTML",
        )
    else:
        await message.answer(
            "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            parse_mode="HTML"
        )

@router.message(F.text == "–í–∏–π—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–∏üö™")
async def exit_team_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–∏?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–¢–∞–∫, –≤–∏–π—Ç–∏")],
                [types.KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="HTML"
    )
    await state.set_state(Team.confirm_exit)

@router.message(Team.confirm_exit, F.text == "–¢–∞–∫, –≤–∏–π—Ç–∏")
async def confirm_exit_team_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await exit_team(user_id):
        await message.answer(
            "–£—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –∫–æ–º–∞–Ω–¥–∏",
            parse_mode="HTML",
            reply_markup=get_not_team_kb()
        )
    else:
        await message.answer(
            "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            parse_mode="HTML"
        )
    await state.clear()

@router.message(Team.confirm_exit, F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_exit_team_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–∏—Ö—ñ–¥ –∑ –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        parse_mode="HTML",
        reply_markup=get_have_team_kb()
    )
    await state.clear()
        
@router.message(F.text == "–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
async def test_task_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        category = await get_team_category(user_id)
        if category == "Innovative Design":
            await message.answer(
                "–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 'Innovative Design' –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏.",
                parse_mode="HTML",
            )
        elif category == "Team Design":
            await message.answer(
                "–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 'Team Design' –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏.",
                parse_mode="HTML",
            )
    except Exception:
        await message.answer(
            "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
            parse_mode="HTML"
        )