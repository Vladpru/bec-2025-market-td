from os import getenv
from bot.utils.shop_logic import get_shop_config, check_order_cooldown, check_item_rules, PHASE_NAMES, STATUS_EMOJI
from datetime import timezone
import datetime
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from bson.objectid import ObjectId

from bot.utils.td_dg import (
    products_collection, teams_collection, orders_collection, is_team_exist, is_team_password_correct
)
from bot.utils.sheetslogger import log_action 

class CaptainActions(StatesGroup):
    shop_choosing_quantity = State()
    writing_exchange_request = State()
    writing_return_request = State()

router = Router()

async def view_shop_page(message_or_callback, state: FSMContext, page: int):
    if isinstance(message_or_callback, types.CallbackQuery):
        message = message_or_callback.message
    else:
        message = message_or_callback

    config = await get_shop_config()
    current_phase = config['phase']
    
    ITEMS_PER_PAGE = 5
    skip = (page - 1) * ITEMS_PER_PAGE

    db_filter = {"stock_quantity": {"$gt": 0}}
    
    if current_phase == 1:
        db_filter["description"] = {"$in": ["Tier 1", "Tier 2", "Tier 3"]}
    elif current_phase == 2:
        db_filter["description"] = {"$in": ["Tier 1", "Tier 2", "Tier 3", "Tier 4", "Tier 5", "Tier 6"]}

    products = await products_collection.find(db_filter).skip(skip).limit(ITEMS_PER_PAGE).to_list(length=ITEMS_PER_PAGE)
    total_items = await products_collection.count_documents(db_filter)
    
    user = await teams_collection.find_one({"telegram_id": str(message_or_callback.from_user.id)})
    
    timestamp = datetime.datetime.now(timezone.utc).strftime('%H:%M:%S UTC')
    text = (f"üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω** (–§–∞–∑–∞: *{PHASE_NAMES[current_phase]}*)\n")

    if not config['is_open']:
        text += "üî¥ **–£–í–ê–ì–ê: –ú–∞–≥–∞–∑–∏–Ω –Ω–∞—Ä–∞–∑—ñ –∑–∞—á–∏–Ω–µ–Ω–æ!**\n\n"
    elif current_phase == 0:
        text += "‚ö™Ô∏è **–£–í–ê–ì–ê: –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É.**\n\n"

    keyboard_rows = []
    if products:
       for p in products:
           stock_info = f"(–ù–∞ —Å–∫–ª–∞–¥—ñ: {p['stock_quantity']} —à—Ç.)"
           
           if current_phase == 2:
               allowed = p.get("allowed_to_buy")
               if allowed is not None:
                   stock_info = f"(–ù–∞ —Å–∫–ª–∞–¥—ñ: {p['stock_quantity']} —à—Ç. | –ú–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏: {allowed} —à—Ç.)"
           text += (f"üîπ **{p['name']}**\n"
                    f"   –¶—ñ–Ω–∞: {p['price_coupons']} –∫—É–ø–æ–Ω—ñ–≤ {stock_info}\n\n")
                    
           if config['is_open'] and current_phase > 0:
               keyboard_rows.append([InlineKeyboardButton(text=f"‚ûï –î–æ–¥–∞—Ç–∏ '{p['name']}'", callback_data=f"addtocart_{p['_id']}")])
    else:
        text += "–¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î."

    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"shoppage_{page-1}"))
    if total_items > page * ITEMS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"shoppage_{page+1}"))
    if nav_buttons:
        keyboard_rows.append(nav_buttons)

    keyboard_rows.append([InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data="view_cart")])
    keyboard_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª. –º–µ–Ω—é", callback_data="captain_main_menu")])
    
    if isinstance(message_or_callback, types.CallbackQuery):
        await message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows), parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows), parse_mode="Markdown")
        
# --- 1. –ú–ê–ì–ê–ó–ò–ù (–≤—Ö—ñ–¥ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è) ---
@router.callback_query(F.data == "captain_shop")
async def show_shop_start(callback: types.CallbackQuery, state: FSMContext):
    """–í—Ö—ñ–¥–Ω–∞ —Ç–æ—á–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω. –û—á–∏—â—É—î —Å—Ç–∞—Ä–∏–π –∫–æ—à–∏–∫ —ñ –ø–æ–∫–∞–∑—É—î 1-—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É."""
    await state.update_data(cart={})
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—é, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–ª—É—Ç–∞–Ω–∏–Ω–∏
    await callback.message.delete()
    await view_shop_page(callback.message, state, page=1)

@router.callback_query(F.data.startswith("shoppage_"))
async def handle_shop_page(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –≤ –º–∞–≥–∞–∑–∏–Ω—ñ."""
    page = int(callback.data.split("_")[1])
    await view_shop_page(callback, state, page=page)

# --- 2. –î–û–î–ê–í–ê–ù–ù–Ø –¢–û–í–ê–†–£ –í –ö–û–®–ò–ö ---
@router.callback_query(F.data.startswith("addtocart_"))
async def add_to_cart_start(callback: types.CallbackQuery, state: FSMContext):
    product_id = ObjectId(callback.data.split("_")[1])
    product = await products_collection.find_one({"_id": product_id})
    if not product:
        return await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
    
    await state.set_state(CaptainActions.shop_choosing_quantity)
    await state.update_data(product_to_add=str(product_id))
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product['name']}' (–¥–æ—Å—Ç—É–ø–Ω–æ: {product['stock_quantity']}):")

@router.message(CaptainActions.shop_choosing_quantity)
async def add_to_cart_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ.")
    
    quantity = int(message.text)
    data = await state.get_data()
    product_id = ObjectId(data.get("product_to_add"))
    
    is_allowed, reason = await check_item_rules(product_id, quantity)
    if not is_allowed:
        return await message.answer(f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {reason}\n\n–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω.")
        
    product = await products_collection.find_one({"_id": product_id})
    if quantity > product['stock_quantity']:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ. –ú–∞–∫—Å–∏–º—É–º: {product['stock_quantity']}.")
        
    cart = data.get("cart", {})
    cart[str(product_id)] = cart.get(str(product_id), 0) + quantity
    
    await state.update_data(cart=cart)
    await state.set_state(None)
    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ '{product['name']}' x{quantity} –¥–æ –∫–æ—à–∏–∫–∞.")
    await view_shop_page(message, state, page=1)


# --- 3. –ö–û–®–ò–ö –¢–ê –û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ---
@router.callback_query(F.data == "view_cart" or F.data == "captain_cart")
async def view_cart(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        return await callback.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
    
    user = await teams_collection.find_one({"telegram_id": str(callback.from_user.id)})
    
    total_cost = 0
    cart_text = "üõí **–í–∞—à –∫–æ—à–∏–∫:**\n\n"
    
    for product_id_str, quantity in cart.items():
        product = await products_collection.find_one({"_id": ObjectId(product_id_str)})
        item_total = product['price_coupons'] * quantity
        total_cost += item_total
        cart_text += f"üîπ {product['name']} - {quantity} —à—Ç. x {product['price_coupons']} = {item_total} –∫—É–ø–æ–Ω—ñ–≤\n"

    cart_text += f"\n**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** {total_cost} –∫—É–ø–æ–Ω—ñ–≤"
    cart_text += f"\n**–í–∞—à –±–∞–ª–∞–Ω—Å:** {user['budget']} –∫—É–ø–æ–Ω—ñ–≤"

    keyboard = [[InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="place_order")],
                [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")],
                [InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="captain_shop_continue")]]
    
    await callback.message.edit_text(cart_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="Markdown")

@router.callback_query(F.data == "captain_shop_continue")
async def continue_shopping(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await view_shop_page(callback.message, state, page=1)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(cart={})
    await callback.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!", show_alert=True)
    await callback.message.delete()
    await view_shop_page(callback.message, state, page=1)
   
@router.callback_query(F.data == "place_order")
async def place_order(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    data = await state.get_data()
    cart = data.get("cart", {})
    user = await teams_collection.find_one({"telegram_id": str(callback.from_user.id)})
    team_name = user['team_name']
    
    # 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –ø—Ä–∞–≤–∏–ª–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è –≤—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    is_order_allowed, order_reason = await check_order_cooldown(team_name)
    if not is_order_allowed:
        return await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {order_reason}")

    items_for_order, total_cost = [], 0
    for product_id_str, quantity in cart.items():
        product_id = ObjectId(product_id_str)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä—ñ–≤–Ω—ñ —Ç–æ–≤–∞—Ä—É
        is_item_allowed, item_reason = await check_item_rules(product_id, quantity)
        if not is_item_allowed:
            await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {item_reason}\n–°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ—à–∏–∫ –∑–∞–Ω–æ–≤–æ.")
            return await state.update_data(cart={})

        product = await products_collection.find_one({"_id": product_id})
        if quantity > product['stock_quantity']:
            await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: '{product['name']}' –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ.")
            return await state.update_data(cart={})
            
        total_cost += product['price_coupons'] * quantity
        items_for_order.append({"product_id": product_id, "product_name": product['name'], "quantity": quantity, "price_per_item": product['price_coupons']})

    if total_cost > user['budget']:
        return await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—É–ø–æ–Ω—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['budget']}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {total_cost}.")

    # --- –¢–†–ê–ù–ó–ê–ö–¶–Ü–Ø ---
    try:
        last_order_number = await orders_collection.count_documents({})
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–º—ñ–Ω–Ω—É –∑ —á–∞—Å–æ–º –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        order_creation_time = datetime.datetime.now(timezone.utc)
        
        # --- –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô PRINT ---
        # print(f"[DEBUG] –ß–∞—Å, —â–æ –ó–ê–ü–ò–°–£–Ñ–¢–¨–°–Ø –≤ –±–∞–∑—É: {order_creation_time}, TZinfo: {order_creation_time.tzinfo}")

        order_doc = {
            "order_number": last_order_number + 1, "team_name": team_name,
            "captain_telegram_id": callback.from_user.id, "items": items_for_order,
            "total_cost": total_cost, "status": "new", "created_at": order_creation_time
        }
        await orders_collection.insert_one(order_doc)
        for item in items_for_order:
            await products_collection.update_one({"_id": item['product_id']}, {"$inc": {"stock_quantity": -item['quantity']}})
        
        await teams_collection.update_many({"team_name": team_name}, {"$inc": {"budget": -total_cost}})
        
        last_order_number = await orders_collection.count_documents({})
        order_doc = {
            "order_number": last_order_number + 1, "team_name": team_name,
            "captain_telegram_id": callback.from_user.id, 
            "items": items_for_order,
            "total_cost": total_cost, "status": "new", 
            "created_at": datetime.datetime.now(timezone.utc)
        }

        try:
            helpdesk_chat_id = await teams_collection.find({"role": "helpdesk"}).distinct("telegram_id")
            if helpdesk_chat_id:
                for helpdesk_id in helpdesk_chat_id:
                    helpdesk_chat_id = int(helpdesk_id)
                    notification_text = (f"üîî **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!**\n\n"
                                        f"**‚Ññ{order_doc['order_number']}** –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ **{team_name}**.\n"
                                        f"–ó–∞–π–¥—ñ—Ç—å –≤ –º–µ–Ω—é '–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
                    await bot.send_message(helpdesk_id, notification_text, parse_mode="Markdown")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è HelpDesk: {e}")

        await state.update_data(cart={})
        await callback.message.edit_text(f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_doc['order_number']} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
        await log_action(
            action="Order Placed",
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            team_name=team_name,
            details=f"Order #{order_doc['order_number']}, Cost: {total_cost}"
        )
    except Exception as e:
        await callback.message.edit_text("‚ùå –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤.")
        await log_action("CRITICAL Order Error", callback.from_user.id, str(e))
