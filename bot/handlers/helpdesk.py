import datetime
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bson.objectid import ObjectId
from os import getenv

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó
from bot.utils.td_dg import orders_collection, teams_collection, products_collection
from bot.keyboards.choices import get_helpdesk_menu_kb
from bot.utils.sheetslogger import log_action

router = Router()

# --- –°—Ç–∞–Ω–∏ (FSM) ---
class HelpDeskLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class RejectOrder(StatesGroup):
    waiting_for_reason = State()

async def refresh_orders_view(message: types.Message):
    await message.delete()
    await show_active_orders(message)

async def update_active_orders_view(message: types.Message):
    active_orders = await orders_collection.find(
        {"status": {"$in": ["new", "approved"]}}
    ).sort("created_at", 1).to_list(length=20)
    
    if not active_orders:
        return await message.edit_text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.", reply_markup=get_helpdesk_menu_kb())

    await message.edit_text(f"üìù **–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤—Å—å–æ–≥–æ: {len(active_orders)}):**")
    
    for order in active_orders:
        status_emoji = "üïô" if order['status'] == 'new' else "‚úÖ"
        order_text = (f"{status_emoji} **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']}** –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ **{order['team_name']}**\n"
                      f"–°—É–º–∞: {order['total_cost']} –∫—É–ø–æ–Ω—ñ–≤\n–°–∫–ª–∞–¥:\n")
        for item in order['items']:
            order_text += f"- {item['product_name']} x{item['quantity']} —à—Ç.\n"
        
        buttons = []
        if order['status'] == 'new':
            buttons.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"hd_approve_{order['_id']}"))
            buttons.append(InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"hd_reject_{order['_id']}"))
        if order['status'] == 'approved':
             buttons.append(InlineKeyboardButton(text="üì¶ –í–∏–¥–∞–Ω–æ", callback_data=f"hd_complete_{order['_id']}"))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
        await message.answer(order_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(F.text == "HelpDesk")
async def cmd_helpdesk_start(message: types.Message, state: FSMContext):
    await state.set_state(HelpDeskLogin.waiting_for_login)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω HelpDesk:", reply_markup=ReplyKeyboardRemove())

@router.message(HelpDeskLogin.waiting_for_login)
async def process_helpdesk_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(HelpDeskLogin.waiting_for_password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å HelpDesk:")

@router.message(HelpDeskLogin.waiting_for_password)
async def process_helpdesk_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login, password = user_data.get("login"), message.text
    expected_login, expected_password = getenv("HELPDESK_LOGIN"), getenv("HELPDESK_PASSWORD")

    if login == expected_login and password == expected_password:
        await state.clear()
        
        await teams_collection.update_one(
            {"telegram_id": str(message.from_user.id)},
            {"$set": {
                "username": message.from_user.username,
                "telegram_id": str(message.from_user.id),
                "role": "helpdesk",
                "chat_id": message.chat.id
            }},
            upsert=True  
        )

        await message.answer("–í—ñ—Ç–∞—î–º–æ —á–µ–º–ø—ñ–æ–Ω—ñ–≤ HelpDesk! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_helpdesk_menu_kb())
        
        await log_action(
            action="HelpDesk Login",
            user_id=message.from_user.id,
            username=message.from_user.username,
            team_name="N/A" # –£ HelpDesk –Ω–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏
        )
    else:
        await state.set_state(HelpDeskLogin.waiting_for_login)
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n\n–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω HelpDesk:")
        await log_action(
            action="Failed HelpDesk Login",
            user_id=message.from_user.id,
            username=message.from_user.username
        )

@router.callback_query(F.data == "hd_active_orders")
async def show_active_orders(callback: types.CallbackQuery):
    active_orders = await orders_collection.find(
        {"status": {"$in": ["new", "approved"]}}
    ).sort("created_at", 1).to_list(length=20)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é), —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
    try: await callback.message.delete()
    except Exception: pass
    
    if not active_orders:
        await callback.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.", reply_markup=get_helpdesk_menu_kb())
        return await callback.answer()

    await callback.message.answer(f"üìù **–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≤—Å—å–æ–≥–æ: {len(active_orders)}):**")
    
    for order in active_orders:
        status_emoji = "üïô –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ" if order['status'] == 'new' else "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–¥–∞—á—ñ"
        order_text = (f"**–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']}** ({status_emoji})\n"
                      f"–ö–æ–º–∞–Ω–¥–∞: **{order['team_name']}**\n"
                      f"–°—É–º–∞: {order['total_cost']} –∫—É–ø–æ–Ω—ñ–≤\n–°–∫–ª–∞–¥:\n")
        for item in order['items']:
            order_text += f"- {item['product_name']} x{item['quantity']} —à—Ç.\n"
        
        buttons = []
        if order['status'] == 'new':
            buttons.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"hd_approve_{order['_id']}"))
            buttons.append(InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"hd_reject_{order['_id']}"))
        if order['status'] == 'approved':
             buttons.append(InlineKeyboardButton(text="üì¶ –í–∏–¥–∞–Ω–æ", callback_data=f"hd_complete_{order['_id']}"))

        await callback.message.answer(order_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]), parse_mode="Markdown")
        
    await callback.message.answer("---", reply_markup=get_helpdesk_menu_kb()) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤ –∫—ñ–Ω—Ü—ñ
    await callback.answer()

# --- –î–Ü–á –ó –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú–ò ---

# 1. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–∞—á—ñ (‚úÖ –ì–æ—Ç–æ–≤–æ)
@router.callback_query(F.data.startswith("hd_approve_"))
async def approve_order(callback: types.CallbackQuery, bot: Bot):
    order_id = ObjectId(callback.data.split("_")[-1])
    updated_order = await orders_collection.find_one_and_update(
        {"_id": order_id, "status": "new"}, {"$set": {"status": "approved"}}, return_document=True
    )
    if not updated_order: return await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)

    await callback.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{updated_order['order_number']} –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–∞—á—ñ.", show_alert=True)
    
    captain_id = updated_order['captain_telegram_id']
    text = f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{updated_order['order_number']} **–≥–æ—Ç–æ–≤–µ**! –ó–∞–±–µ—Ä—ñ—Ç—å –π–æ–≥–æ —É HelpDesk —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'."
    try: await bot.send_message(captain_id, text, parse_mode="Markdown")
    except Exception as e: print(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
    await log_action(...)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
    await show_active_orders(callback)


# 2. –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏)
@router.callback_query(F.data.startswith("hd_reject_"))
async def reject_order_start(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split("_")[-1]
    order = await orders_collection.find_one({"_id": ObjectId(order_id), "status": "new"})
    if not order: return await callback.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)

    await state.set_state(RejectOrder.waiting_for_reason)
    await state.update_data(order_id_to_reject=order_id)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:")

@router.message(RejectOrder.waiting_for_reason)
async def process_rejection_reason(message: types.Message, state: FSMContext, bot: Bot):
    reason, data = message.text, await state.get_data()
    order_id = ObjectId(data.get("order_id_to_reject"))
    order = await orders_collection.find_one({"_id": order_id})
    if not order:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return await state.clear()

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    for item in order['items']:
        await products_collection.update_one({"_id": item['product_id']}, {"$inc": {"stock_quantity": item['quantity']}})
    await teams_collection.update_many({"team_name": order['team_name']}, {"$inc": {"budget": order['total_cost']}})
    
    await orders_collection.update_one({"_id": order_id}, {"$set": {"status": "rejected", "rejection_reason": reason}})
    
    captain_id = order['captain_telegram_id']
    text = f"‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']} –±—É–ª–æ **–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ**.\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
    try: await bot.send_message(captain_id, text, parse_mode="Markdown")
    except Exception as e: print(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

    await message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await state.clear()
    
    # –ü—ñ—Å–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...", reply_markup=get_helpdesk_menu_kb())


# 3. –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞—á—ñ (üì¶ –í–∏–¥–∞–Ω–æ)
@router.callback_query(F.data.startswith("hd_complete_"))
async def complete_order_manual(callback: types.CallbackQuery, bot: Bot):
    order_id = ObjectId(callback.data.split("_")[-1])
    updated_order = await orders_collection.find_one_and_update(
        {"_id": order_id, "status": "approved"},
        {"$set": {"status": "completed", "completed_at": datetime.datetime.now(datetime.timezone.utc)}},
        return_document=True
    )
    if not updated_order: return await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —É —Å—Ç–∞—Ç—É—Å—ñ '–ì–æ—Ç–æ–≤–æ'.", show_alert=True)
    
    timestamp = datetime.datetime.now().strftime('%H:%M:%S')
    await callback.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{updated_order['order_number']} –≤–∏–¥–∞–Ω–æ –æ {timestamp}.", show_alert=True)
    await callback.message.delete()
    
    captain_id = updated_order['captain_telegram_id']
    text = f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{updated_order['order_number']} –±—É–ª–æ –≤–∏–¥–∞–Ω–æ —Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ HelpDesk."
    try: await bot.send_message(captain_id, text)
    except Exception as e: print(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
    await update_active_orders_view(callback.message)
    await log_action("Order Completed (Manual)", callback.from_user.id, callback.from_user.username, updated_order['team_name'], f"Order #{updated_order['order_number']}")

@router.message(RejectOrder.waiting_for_reason)
async def process_rejection_reason(message: types.Message, state: FSMContext, bot: Bot):
    reason = message.text
    data = await state.get_data()
    order_id = ObjectId(data.get("order_id_to_reject"))
    
    # --- –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ê –ß–ê–°–¢–ò–ù–ê: –ü–û–í–ï–†–ù–ï–ù–ù–Ø –†–ï–°–£–†–°–Ü–í ---
    order = await orders_collection.find_one({"_id": order_id})
    if not order:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return await state.clear()

    # 1. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∫–ª–∞–¥
    for item in order['items']:
        await products_collection.update_one(
            {"_id": item['product_id']},
            {"$inc": {"stock_quantity": item['quantity']}}
        )

    # 2. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É–ø–æ–Ω–∏ –∫–æ–º–∞–Ω–¥—ñ
    await teams_collection.update_many(
        {"team_name": order['team_name']},
        {"$inc": {"budget": order['total_cost']}}
    )

    # 3. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await orders_collection.update_one(
        {"_id": order_id},
        {"$set": {"status": "rejected", "rejection_reason": reason}}
    )

    await message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    
    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–∞–ø—ñ—Ç–∞–Ω–∞
    captain_id = order['captain_telegram_id']
    text = f"‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order['order_number']} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
    try:
        await bot.send_message(captain_id, text, parse_mode="Markdown")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

    await log_action("Order Rejected", message.from_user.id, message.from_user.username, order['team_name'], f"Order #{order['order_number']}, Reason: {reason}")
    await state.clear()


# @router.callback_query(F.data == "hd_general_history")
# async def show_general_history(callback: types.CallbackQuery):
#     await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)

# @router.callback_query(F.data == "hd_team_history")
# async def show_team_history(callback: types.CallbackQuery):
#     await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)

# @router.callback_query(F.data == "hd_stock_view")
# async def show_stock_view(callback: types.CallbackQuery):
#     await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)