from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.no_team import get_not_team_kb
from bot.keyboards.team import get_back_kb, get_have_team_kb
from bot.utils.database import get_team_by_name, add_user_to_team, is_full_team

router = Router()

class FindTeam(StatesGroup):
    team_name = State()
    password = State()

@router.message(F.text == "–£–≤—ñ–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ÉüèÖ")
async def find_team_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏", reply_markup=get_back_kb())
    await state.set_state(FindTeam.team_name)

@router.message(FindTeam.team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_not_team_kb())
        return
    team = await get_team_by_name(message.text)
    if not team:
        await message.answer("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.", reply_markup=get_back_kb())
        return
    await state.update_data(team=team)
    await message.answer(f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –¥–ª—è –≤—Ö–æ–¥—É –≤ –∫–æ–º–∞–Ω–¥—É {team['team_name']}", reply_markup=get_back_kb())
    await state.set_state(FindTeam.password)

@router.message(FindTeam.password)
async def process_team_password(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_not_team_kb())
        return
    data = await state.get_data()
    team = data.get("team")
    if not team or message.text != team["password"]:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.", reply_markup=get_back_kb())
        return
    if await is_full_team(team["team_id"]):
        await message.answer("–í–∏–±–∞—á, –∞–ª–µ –≤ —Ü—ñ–π –∫–æ–º–∞–Ω–¥—ñ –≤–∂–µ 4 —É—á–∞—Å–Ω–∏–∫–∏. –°–ø—Ä–æ–±—É–π –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ–Ω—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é.", reply_markup=get_not_team_kb())
        await state.clear()
        return
    await add_user_to_team(message.from_user.id, team["team_id"])
    await message.answer(f"–í—ñ—Ç–∞—é –≤ –∫–æ–º–∞–Ω–¥—ñ {team['team_name']}!", reply_markup=get_have_team_kb())
    await state.clear()
