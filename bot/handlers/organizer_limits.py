# bot/handlers/admin/limits_handlers.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.utils.td_dg import config_collection

router = Router()

class SetLimits(StatesGroup):
    waiting_for_quantity_limit = State()
    waiting_for_partial_time = State()
    waiting_for_full_time = State()
    waiting_for_interval = State()

def get_limits_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –ù–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="limits_quantity")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞ —á–∞—Å –ø–æ–∫—É–ø–∫–∏", callback_data="limits_time")],
        [InlineKeyboardButton(text="‚è≥ –ù–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–∫—É–ø–∫–∞–º–∏", callback_data="limits_interval")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_menu_back")]
    ])

@router.callback_query(F.data == "admin_set_limits")
async def limits_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("‚è±Ô∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±–º–µ–∂–µ–Ω–Ω—è:", reply_markup=get_limits_menu_kb())

# --- 1. –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ---
@router.callback_query(F.data == "limits_quantity")
async def ask_quantity_limit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SetLimits.waiting_for_quantity_limit)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É, —è–∫—É –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –∑–∞ —Ä–∞–∑:")

@router.message(SetLimits.waiting_for_quantity_limit)
async def set_quantity_limit(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    limit = int(message.text)
    await config_collection.update_one({"_id": "shop_limits"}, {"$set": {"quantity_per_purchase": limit}}, upsert=True)
    await state.clear()
    await message.answer(f"‚úÖ –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {limit} –æ–¥–∏–Ω–∏—Ü—å.", reply_markup=get_limits_menu_kb())

# --- 2. –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —á–∞—Å ---
@router.callback_query(F.data == "limits_time")
async def ask_time_limit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SetLimits.waiting_for_partial_time)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å, –∑ —è–∫–æ–≥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ —á–∞—Å—Ç–∫–æ–≤—É –∫—É–ø—ñ–≤–ª—é (—É —Ö–≤–∏–ª–∏–Ω–∞—Ö –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏):")

@router.message(SetLimits.waiting_for_partial_time)
async def set_partial_time(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    await state.update_data(partial_time=int(message.text))
    await state.set_state(SetLimits.waiting_for_full_time)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å, –∑ —è–∫–æ–≥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ø–æ–≤–Ω—É –∫—É–ø—ñ–≤–ª—é (—É —Ö–≤–∏–ª–∏–Ω–∞—Ö –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏):")

@router.message(SetLimits.waiting_for_full_time)
async def set_full_time(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    partial_time = data.get("partial_time")
    full_time = int(message.text)
    
    await config_collection.update_one(
        {"_id": "shop_limits"}, 
        {"$set": {"partial_purchase_minutes": partial_time, "full_purchase_minutes": full_time}}, 
        upsert=True
    )
    await state.clear()
    await message.answer("‚úÖ –ß–∞—Å–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_limits_menu_kb())

# --- 3. –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª ---
@router.callback_query(F.data == "limits_interval")
async def ask_interval_limit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SetLimits.waiting_for_interval)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–∫—É–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ (—É —Ö–≤–∏–ª–∏–Ω–∞—Ö):")

@router.message(SetLimits.waiting_for_interval)
async def set_interval_limit(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return
    interval = int(message.text)
    await config_collection.update_one({"_id": "shop_limits"}, {"$set": {"purchase_interval_minutes": interval}}, upsert=True)
    await state.clear()
    await message.answer(f"‚úÖ –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–∫—É–ø–∫–∞–º–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval} —Ö–≤–∏–ª–∏–Ω.", reply_markup=get_limits_menu_kb())