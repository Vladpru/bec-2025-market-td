# bot/handlers/admin.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.choices import get_admin_menu_kb
from os import getenv

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
from bot.utils.database import products_collection, config_collection

router = Router()

# --- –°—Ç–∞–Ω–∏ (FSM) ---
class AdminLogin(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# –ù–û–í–Ü –°–¢–ê–ù–ò –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
class AddProduct(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_quantity = State()

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–≤–∞—à –∫–æ–¥, –±–µ–∑ –∑–º—ñ–Ω) ---
@router.message(F.text == "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä")
async def cmd_organizer_start(message: types.Message, state: FSMContext):
    await state.set_state(AdminLogin.waiting_for_login)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(AdminLogin.waiting_for_login)
async def process_admin_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(AdminLogin.waiting_for_password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:")

@router.message(AdminLogin.waiting_for_password)
async def process_admin_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get("login")
    password = message.text
    expected_login = getenv("ORGANIZER_LOGIN")
    expected_password = getenv("ORGANIZER_PASSWORD")
    if login == expected_login and password == expected_password:
        await state.clear()
        await message.answer("–í—ñ—Ç–∞—î–º–æ, –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:", reply_markup=get_admin_menu_kb())
    else:
        await state.set_state(AdminLogin.waiting_for_login)
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n\n–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞:")


### –ë–õ–û–ö 1: –ö–ï–†–£–í–ê–ù–ù–Ø –°–¢–ê–ù–û–ú –ú–ê–ì–ê–ó–ò–ù–£ ###

@router.callback_query(F.data == "admin_shop_on")
async def turn_shop_on(callback: types.CallbackQuery):
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î. upsert=True —Å—Ç–≤–æ—Ä–∏—Ç—å –π–æ–≥–æ, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î.
    await config_collection.update_one(
        {"_id": "shop_status"}, 
        {"$set": {"is_open": True}}, 
        upsert=True
    )
    await callback.answer("‚úÖ –ú–∞–≥–∞–∑–∏–Ω –±—É–ª–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.", show_alert=True)

@router.callback_query(F.data == "admin_shop_off")
async def turn_shop_off(callback: types.CallbackQuery):
    await config_collection.update_one(
        {"_id": "shop_status"}, 
        {"$set": {"is_open": False}}, 
        upsert=True
    )
    await callback.answer("‚ùå –ú–∞–≥–∞–∑–∏–Ω –±—É–ª–æ –≤–∏–º–∫–Ω–µ–Ω–æ.", show_alert=True)


### –ë–õ–û–ö 2: –ö–ï–†–£–í–ê–ù–ù–Ø –¢–û–í–ê–†–ê–ú–ò (CRUD) ###

# –ù–æ–≤–µ –º–µ–Ω—é –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏
def get_manage_items_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="admin_add_item")],
        [InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏", callback_data="admin_view_items")],
        # –¢—É—Ç –∑–≥–æ–¥–æ–º –±—É–¥—É—Ç—å –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" —Ç–∞ "–í–∏–¥–∞–ª–∏—Ç–∏"
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu_back")]
    ])

# –ó–∞–º—ñ—Å—Ç—å –∑–∞–≥–ª—É—à–∫–∏ —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_manage_items")
async def manage_items(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ —Ç–æ–≤–∞—Ä–∞–º–∏:", 
        reply_markup=get_manage_items_kb()
    )

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_menu_back")
async def admin_menu_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ñ—Ç–∞—î–º–æ, –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä! –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥—ñ–π:",
        reply_markup=get_admin_menu_kb()
    )

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ ---
@router.callback_query(F.data == "admin_view_items")
async def view_items(callback: types.CallbackQuery):
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
    products_cursor = products_collection.find({})
    products_list = await products_cursor.to_list(length=100) # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ 100 —Ç–æ–≤–∞—Ä—ñ–≤

    if not products_list:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
        return

    response_text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n\n"
    for product in products_list:
        response_text += (
            f"üîπ **{product.get('name')}**\n"
            f"   –¶—ñ–Ω–∞: {product.get('price')} –∫—É–ø–æ–Ω—ñ–≤\n"
            f"   –ó–∞–ª–∏—à–æ–∫: {product.get('quantity')} —à—Ç.\n\n"
        )
    
    await callback.message.answer(response_text, parse_mode="Markdown")
    await callback.answer()


# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ø–æ—á–∞—Ç–æ–∫ FSM) ---
@router.callback_query(F.data == "admin_add_item")
async def add_item_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddProduct.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É:")
    await callback.answer()

@router.message(AddProduct.waiting_for_name)
async def add_item_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProduct.waiting_for_description)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

@router.message(AddProduct.waiting_for_description)
async def add_item_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProduct.waiting_for_price)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")

@router.message(AddProduct.waiting_for_price)
async def add_item_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(price=int(message.text))
    await state.set_state(AddProduct.waiting_for_quantity)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")

@router.message(AddProduct.waiting_for_quantity)
async def add_item_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(quantity=int(message.text))
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤ –ë–î
    product_data = await state.get_data()
    
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    product_data.setdefault("tier", "Uncategorized")
    product_data.setdefault("purchase_limit", 1)
    product_data.setdefault("is_active", True)
    
    await products_collection.insert_one(product_data)
    
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product_data['name']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=get_admin_menu_kb())
    await state.clear()


# --- –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏-–∑–∞–≥–ª—É—à–∫–∏ ---
@router.callback_query(F.data == "admin_set_limits")
async def set_limits(callback: types.CallbackQuery):
    await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)

@router.callback_query(F.data == "admin_view_orders")
async def view_orders(callback: types.CallbackQuery):
    await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)

@router.callback_query(F.data == "admin_view_analytics")
async def view_analytics(callback: types.CallbackQuery):
    await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)